Why to use singleton?
    Sometimes you need to make sure that you have one and only one instance of an object. This is where the singleton pattern can be useful. A singleton represents a single instance of an object.
    Only one can be created, no matter how many times the object is instantiated.



Here is some examples :
    -> using class :

            class Singleton {

              constructor() {
                  if (!Singleton.instance) {
                      Singleton.instance = new Logger();
                  }
              }

              getInstance() {
                  return Singleton.instance;
              }

            }

            module.exports = Singleton;

    -> using function or var :

            var singleton = function singleton(){
                 var socketList = {};//we can use a simple const instead to hold only one instance

                this.add = function(userId, socket){
                    if(!socketList[userId]){
                        socketList[userId] = socket;
                    }
                };

                this.remove = function(userId){
                    if(socketList[userId]){
                        delete socketList[userId];
                    }
                };

                this.getSocketList = function(){
                    return socketList;
                };

                if(singleton.caller != singleton.getInstance){
                    throw new Error("This object cannot be instanciated");
                }
            }

            singleton.instance = null;

            singleton.getInstance = function(){
                if(this.instance === null){
                    this.instance = new singleton();
                }
                return this.instance;
            }

            module.exports = singleton.getInstance();



